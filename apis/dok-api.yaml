openapi: "3.0.0"
info:
  version: 1.2.0
  title: RAP-LP
  description: OpenAPI Specification example to handle Rules for the category []Hypermedia] in the Swedish REST API-profil https://dev.dataportal.se/rest-api-profil
  license:
    name:  EUPL-1.2 license
externalDocs:
  #description: "Find out more about the API info text goes here"
  #url: Url to external documentation
servers:
  - url: http://petstore.swagger.io/v1
paths:
<<<<<<< HEAD
  /example:
    get:
      summary: Example API with Payload in Headers Allowed
      description: For testing
      operationId: exampleRequest
      tags:
        [tag1, tag2]
      responses:
        '200':
          description: example response
          content:
            application/json; charset=utf-8:    
              schema:
                examples: dsa
                
               
  /example2:
    post:
      summary: Example API with Payload in Headers Allowed
      description: For testing
      operationId: exampleRequest2
      tags:
        - tag1
        - tag2
      requestBody:
        required: true
        content:
          application/json; charset=utf-8:
            examples: tre
            schema:

              type: object
              properties:
                data:
                  type: integer
          application/json:
            exampsles: tre
            schema:           
              type: object
              properties:
                data:
                  type: integer
      responses:
        '200':
          description: 
          content:
            exampels: tvÃ¥
            text/plain:
              schema:
<<<<<<< HEAD
                $ref: '#/components/schemas/Error1'
                
=======
                $ref: '#/components/schemas/Error'
=======
  /pets:
>>>>>>> develop
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            maximum: 100
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
<<<<<<< HEAD
                $ref: '#/components/schemas/Pet'
    patch:
      operationId: editTopet
      tags:
        - pet
      description: edit pet with provided id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        204:
          description: pet edited successfully
        404:
          description: pet not found
>>>>>>> develop


=======
                $ref: "#/components/schemas/Error"
>>>>>>> develop
components:
  schemas:
<<<<<<< HEAD
    Error1:
      examples: test
=======
    Pet:
>>>>>>> develop
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string