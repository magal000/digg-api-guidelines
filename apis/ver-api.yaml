# SPDX-FileCopyrightText: 2025 diggsweden/rest-api-profil-lint-processor
#
# SPDX-License-Identifier: EUPL-1.2

openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://petstore.swagger.io/v09/my-api

paths:
  /example:
    post:
      summary: Example API with Payload in Headers Allowed
      description: Example API with Payload in Headers Allowed
      operationId: example
      tags:
        - tag1
        - tag2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: string
      parameters:
        - name: payloadData
          in: header
          description: Payload data in headers (allowed in this example)
          required: true
          schema:
            type: object
        - name: payloadData2
          in: header
          description: Payload data in headers (allowed in this example)
          required: true
          schema:
            type: string
            format: binary
        - name: nestedHeaders
          in: header
          description: Nested structure in headers (discouraged)
          required: true
          schema:
            type: object
            properties:
              nestedField:
              type: string

      responses:
        '200':
          description: Successful response
  /pets:
    get:
      description: |
        Returns all pets from the system that the user has access to
      operationId: findPets
      tags:
        - tag1
        - tag2
      parameters:
        - name: verylon_name
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string        
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
          required: false
          description: default number of results to start from.
        - name: 20
          in: query
          description: number of results to return
          required: false
          schema:
            type: integer
            format: int32
        - name: url_sakra_technen_validation
          in: query
          description: valid characters according to RFC 3986
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new pet in the store. Duplicates are allowed
      operationId: addPet
      tags:
        - tag2
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pe,ts/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: findPetById
      tags:
        - tag1
        - tag2
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      tags:
        - tag1
        - tag2
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /petshamta/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: findPetById
      tags:
        - tag1
        - tag2
      parameters:
        - name: i_d
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /petshamtame/{id_djur}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: hamtaPetById
      tags:
        - tag1
      parameters:
        - name: iddjur
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
  security:
  - bearerAuth: []  # <-- use the same name here

  schemas:
    Pet:
      allOf:
        - $ref: '#/components/schemas/NewPet'
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              format: int64

    NewPet:
      type: object
      required:
        - name  
      properties:
        name:
          type: string
        tag:
          type: string    

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

tags:
  - name: tag1
    description: Tag 1 description
  - name: tag2
    description: Tag 2 description
